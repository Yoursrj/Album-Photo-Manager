//We're going to add in a button next to each user name.And whenever it is clicked on, we're going to delete that user by dispatching that thunk that we just put together.
//Now, one thing I want to mention really quickly here inside of users list, we've got a component that is already fairly large. 
//And if we start to add in a bunch more stuff inside of here around deleting users, and if we also start to add in stuff around allowing for the expansion of each user because remember, you're going to eventually be able to click on this thing and expand this panel and see albums created by this user.
//We're going to make a new component called the user list item.Or users list item.This component is going to render one individual user.
//So pretty much just exactly what you see right there.So let's make this new component.As a prop, we're going to pass down the user object.
//So the user that should be rendered inside this thing.
import { GoTrashcan } from "react-icons/go";
import Button from "./Button";
import { removeUser } from "../store";
import { UseThunk } from "../hooks/use-thunk";
import ExpandablePanel from "./ExpandablePanel";
import AlbumsList from "./AlbumList";
//These lines import various dependencies and components required for the UserListItem component.
function UserListItem({ user }) {//This line declares a functional component named UserListItem that accepts a prop named user.
    //In the code snippet, the useFetchAlbumsQuery hook is called with the user prop as an argument:
    const [doRemoveUser, isLoading, error] = UseThunk(removeUser);
    //This line uses the UseThunk custom hook to dispatch the removeUser thunk action. It returns an array with three elements: doRemoveUser, isLoading, and error.
    //doRemoveUser is a function that triggers the removal of the user.
    //isLoading is a boolean value indicating whether the removal operation is in progress.
    //error is a boolean value indicating whether an error occurred during the removal operation.

 
    //By using this hook, the isLoading variable receives a true value when the data is being fetched, and a false value when the fetching is complete. 
    //This allows the component to conditionally render loading indicators or handle the data based on the loading state.
    //The useFetchAlbumsQuery hook is likely a custom hook generated by Redux Toolkit Query. It internally manages the data fetching process, including tracking the loading state (isLoading). 
    //The hook automatically sets the isLoading value based on the status of the data fetching operation.  
    const handleClick = () => {
        doRemoveUser(user);
    }
    //This line defines an arrow function named handleClick that calls the doRemoveUser function (dispatched thunk) with the user prop as an argument. 
    //This function is intended to handle the action of removing a user.

    //A fragment allows us to write out a little bit of sex or kind of a grouping of G.And when this actually gets displayed on the screen, a new HTML element is not going to be created.
    //So if we put in a div like so we wrote in a div, a brand new development would be created.We don't want a div in this case.
    //And the reason for that is back inside of expandable panel.Here's where our header goes.
    //This div has some class names that are going to make everything inside that header kind of line up rightnext to each other, and that's really desirable.
    const header = <>{/*This code block defines a JSX fragment named header which represents the header content of the ExpandablePanel.*/}
        <Button className="mr-3" loading={isLoading} onClick={handleClick}>
{/*It consists of a Button component (with a trashcan icon) that triggers the removal operation when clicked. The loading prop of the Button component is set to isLoading to handle the loading state */}
            <GoTrashcan />
        </Button>  
{/*If error is true, it displays an error message indicating that there was an error while deleting the user */} 
        {error && <div> Error deleting User.</div>}
        {user.name}{/*Finally, it displays the name of the user (user.name)*/}
        {/*So now that we have split this thing up into two separate components, now we can much more easily add in a little button just the left hand side of the users name.
           And again, whenever we click on that, we're going to delete that particular user. */}
    </>
//This code block returns the JSX markup of the UserListItem component.
    return (//It renders an ExpandablePanel component, passing the header JSX fragment as the header prop.
        <ExpandablePanel header={header}>
{/*Within the ExpandablePanel, it renders an AlbumsList component, passing the user prop to display the albums associated with the user*/}
            <AlbumsList user={user} />
        </ExpandablePanel>
    );
}
export default UserListItem;